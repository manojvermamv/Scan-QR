apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

def configuration = rootProject.ext.configuration

android {
    compileSdkVersion configuration.compileSdkVersion
    buildToolsVersion configuration.buildToolsVersion

    signingConfigs {
        release {
            storeFile file('../keystore_scanqr.jks')
            storePassword "123456"
            keyAlias "scanqr"
            keyPassword "123456"
        }
    }

    defaultConfig {
        applicationId configuration.package
        minSdkVersion configuration.minSdkVersion
        targetSdkVersion configuration.targetSdkVersion
        versionCode configuration.versionCode
        versionName configuration.versionName

        multiDexEnabled true
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        vectorDrawables.useSupportLibrary = true
        setProperty("archivesBaseName", "app")
    }

    buildFeatures {
        viewBinding true
        buildConfig true
    }
    dataBinding {
        enabled = true
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'InvalidPackage'
    }
    dexOptions {
        javaMaxHeapSize "1536m"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            res.srcDirs = [
                    'src/main/res',
                    'src/main/res/layouts',
            ]
        }
    }

    // Change all of these based on your requirements
    def archiveBuildTypes = ["release", "debug"];
    def distFolder = "${System.properties['user.home']}\\Desktop\\Scan QR\\"
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name in archiveBuildTypes) {
                // Update output filename here
                if (variant.versionName != null) {
                    String name = "${variant.getFlavorName()}_${variant.buildType.name}_v${variant.versionCode}.apk"
                    outputFileName = new File(name)
                }
                def taskSuffix = variant.name.capitalize()
                def assembleTaskName = "assemble${taskSuffix}"
                if (tasks.findByName(assembleTaskName)) {
                    def copyAPKFolderTask = tasks.create(name: "archive${taskSuffix}", type: Copy) {
                        description "Archive/copy APK folder to a shared folder."
                        def sourceFolder = "$buildDir/outputs/apk/${output.baseName.replace("-", "/")}"
                        def destinationFolder = "$distFolder${output.baseName.replace("-", "/")}"
                        print "Copying APK folder from: $sourceFolder into $destinationFolder\n"
                        from(sourceFolder)
                        into destinationFolder
                        eachFile { file ->
                            file.path = file.name
                        }
                        includeEmptyDirs = false
                    }
                    tasks[assembleTaskName].finalizedBy = [copyAPKFolderTask]
                }
            }
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation project(path: ':permissionschecker')

    // Default library
    implementation 'com.android.support:multidex:2.0.1'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.work:work-runtime:2.5.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.exifinterface:exifinterface:1.3.2'
    implementation 'androidx.documentfile:documentfile:1.0.1'

    //Kotlin Purpose
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.fragment:fragment-ktx:1.4.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.4.1'

    // Firebase
    implementation 'com.google.firebase:firebase-core:21.0.0'
    implementation 'com.google.firebase:firebase-crashlytics:18.2.1'
    implementation 'com.google.firebase:firebase-analytics:19.0.1'
    implementation 'com.google.firebase:firebase-analytics-ktx:19.0.1'

    // UI & Widgets
    implementation 'com.scwang.wave:MultiWaveHeader:1.0.0-andx'
    implementation 'com.github.f0ris.sweetalert:library:1.6.2'
    implementation "com.airbnb.android:lottie:3.7.2"
    implementation 'com.loopeer.lib:shadow:0.0.4-beta3'
    implementation 'com.github.GrenderG:Toasty:1.5.2'
    implementation 'me.grantland:autofittextview:0.2.1'
    implementation 'com.asksira.android:webviewsuite:1.0.3'
    implementation 'com.github.denzcoskun:ImageSlideshow:0.1.0'
    implementation 'com.mikhaellopez:circularimageview:4.3.0'

    // Images Loading & Sever
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    def room_version = "2.2.0-rc01"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-rxjava2:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    implementation "org.greenrobot:eventbus:3.3.1"
    //implementation 'com.github.wrdlbrnft:sorted-list-adapter:0.3.0.27'
    implementation 'com.h6ah4i.android.widget.advrecyclerview:advrecyclerview:1.0.0'

    // ImagePicker, UCrop, Permissions
    implementation 'gun0912.ted:tedbottompicker:2.0.1'
    implementation 'com.github.krokyze:ucropnedit:2.2.6'

    // qr code
    implementation 'com.google.zxing:core:3.3.3'
    implementation 'androidmads.library.qrgenearator:QRGenearator:1.0.4'
    implementation 'com.budiyev.android:code-scanner:2.1.0'
    implementation 'com.google.android.play:core:1.10.3'
    implementation 'com.github.SanojPunchihewa:InAppUpdater:1.0.5'

    implementation 'com.fasterxml.jackson.core:jackson-core:2.10.1'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.10.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.1'
    implementation('io.socket:socket.io-client:2.0.1') {
        exclude group: 'org.json', module: 'json'
    }

    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}